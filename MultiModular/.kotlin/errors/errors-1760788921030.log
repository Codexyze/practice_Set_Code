kotlin version: 2.0.21
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: D:/KotlinApp/MultiModular/presentation/src/main/java/com/nutrino/presentation/screens/GetAllMemeScreen.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:65)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:38)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:27)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:14)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:246)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipeline.kt:142)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:148)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:43)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:103)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:49)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:464)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:73)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:675)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1660)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN name:GetAllMemeScreen visibility:public modality:FINAL <> (memeViewModel:com.nutrino.presentation.viewmodels.MemeViewModel) returnType:kotlin.Unit
  annotations:
    Composable
  VALUE_PARAMETER name:memeViewModel index:0 type:com.nutrino.presentation.viewmodels.MemeViewModel
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=com.nutrino.presentation.viewmodels.MemeViewModel
  BLOCK_BODY
    VAR name:viewModel type:com.nutrino.presentation.viewmodels.MemeViewModel [val]
      BLOCK type=com.nutrino.presentation.viewmodels.MemeViewModel origin=FOLDED_ELVIS
        WHEN type=com.nutrino.presentation.viewmodels.MemeViewModel origin=FOLDED_ELVIS
          BRANCH
            if: COMPOSITE type=kotlin.Boolean origin=null
              CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                  arg0: GET_VAR 'memeViewModel: com.nutrino.presentation.viewmodels.MemeViewModel declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=com.nutrino.presentation.viewmodels.MemeViewModel origin=null
                  arg1: CONST Null type=kotlin.Nothing? value=null
            then: GET_VAR 'memeViewModel: com.nutrino.presentation.viewmodels.MemeViewModel declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=com.nutrino.presentation.viewmodels.MemeViewModel origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: TYPE_OP type=com.nutrino.presentation.viewmodels.MemeViewModel origin=IMPLICIT_CAST typeOperand=com.nutrino.presentation.viewmodels.MemeViewModel
              CALL 'public final fun hiltViewModel$default <VM> (viewModelStoreOwner: androidx.lifecycle.ViewModelStoreOwner?, key: kotlin.String?, $mask0: kotlin.Int, $handler: kotlin.Any?): VM of androidx.hilt.navigation.compose.HiltViewModelKt.hiltViewModel$default [inline] declared in androidx.hilt.navigation.compose.HiltViewModelKt' type=VM of androidx.hilt.navigation.compose.HiltViewModelKt.hiltViewModel$default origin=DEFAULT_DISPATCH_CALL
                <VM>: com.nutrino.presentation.viewmodels.MemeViewModel
                viewModelStoreOwner: COMPOSITE type=androidx.lifecycle.ViewModelStoreOwner? origin=DEFAULT_VALUE
                  CONST Null type=androidx.lifecycle.ViewModelStoreOwner? value=null
                key: COMPOSITE type=kotlin.String? origin=DEFAULT_VALUE
                  CONST Null type=kotlin.String? value=null
                $mask0: CONST Int type=kotlin.Int value=3
                $handler: CONST Null type=kotlin.Any? value=null
    VAR name:getAllMemeState type:androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> [val]
      TYPE_OP type=androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> origin=IMPLICIT_CAST typeOperand=androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState>
        CALL 'public final fun collectAsState$default <T> (context: kotlin.coroutines.CoroutineContext?, $mask0: kotlin.Int, $handler: kotlin.Any?): androidx.compose.runtime.State<T of androidx.compose.runtime.SnapshotStateKt.collectAsState$default> declared in androidx.compose.runtime.SnapshotStateKt' type=androidx.compose.runtime.State<T of androidx.compose.runtime.SnapshotStateKt.collectAsState$default> origin=DEFAULT_DISPATCH_CALL
          <T>: com.nutrino.presentation.states.GetAllMemesState
          $receiver: CALL 'public final fun <get-getAllMemesState> (): kotlinx.coroutines.flow.StateFlow<com.nutrino.presentation.states.GetAllMemesState> declared in com.nutrino.presentation.viewmodels.MemeViewModel' type=kotlinx.coroutines.flow.StateFlow<com.nutrino.presentation.states.GetAllMemesState> origin=GET_PROPERTY
            $this: GET_VAR 'memeViewModel: com.nutrino.presentation.viewmodels.MemeViewModel declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=com.nutrino.presentation.viewmodels.MemeViewModel origin=null
          context: COMPOSITE type=kotlin.coroutines.CoroutineContext? origin=DEFAULT_VALUE
            CONST Null type=kotlin.coroutines.CoroutineContext? value=null
          $mask0: CONST Int type=kotlin.Int value=1
          $handler: CONST Null type=kotlin.Any? value=null
    WHEN type=kotlin.Unit origin=WHEN
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun <get-data> (): com.nutrino.domain.mappers.Meme? declared in com.nutrino.presentation.states.GetAllMemesState' type=com.nutrino.domain.mappers.Meme? origin=GET_PROPERTY
              $this: CALL 'public abstract fun <get-value> (): T of androidx.compose.runtime.State declared in androidx.compose.runtime.State' type=com.nutrino.presentation.states.GetAllMemesState origin=GET_PROPERTY
                $this: GET_VAR 'val getAllMemeState: androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> [val] declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> origin=null
            arg1: CONST Null type=kotlin.Nothing? value=null
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public final fun Text-80ic1_w$default (text: kotlin.String, modifier: androidx.compose.ui.Modifier?, color: androidx.compose.ui.graphics.Color, fontSize: androidx.compose.ui.unit.TextUnit, fontStyle: androidx.compose.ui.text.font.FontStyle?, fontWeight: androidx.compose.ui.text.font.FontWeight?, fontFamily: androidx.compose.ui.text.font.FontFamily?, letterSpacing: androidx.compose.ui.unit.TextUnit, textDecoration: androidx.compose.ui.text.style.TextDecoration?, textAlign: androidx.compose.ui.text.style.TextAlign?, lineHeight: androidx.compose.ui.unit.TextUnit, overflow: androidx.compose.ui.text.style.TextOverflow, softWrap: kotlin.Boolean, maxLines: kotlin.Int, minLines: kotlin.Int, onTextLayout: kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>?, style: androidx.compose.ui.text.TextStyle?, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Unit declared in androidx.compose.material3.TextKt' type=kotlin.Unit origin=DEFAULT_DISPATCH_CALL
            text: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="Total Memes: "
              BLOCK type=kotlin.Int? origin=FOLDED_SAFE_CALL
                WHEN type=kotlin.Int? origin=FOLDED_SAFE_CALL
                  BRANCH
                    if: COMPOSITE type=kotlin.Boolean origin=null
                      VAR IR_TEMPORARY_VARIABLE name:tmp1_safe_receiver type:com.nutrino.domain.mappers.Meme? [val]
                        CALL 'public final fun <get-data> (): com.nutrino.domain.mappers.Meme? declared in com.nutrino.presentation.states.GetAllMemesState' type=com.nutrino.domain.mappers.Meme? origin=GET_PROPERTY
                          $this: CALL 'public abstract fun <get-value> (): T of androidx.compose.runtime.State declared in androidx.compose.runtime.State' type=com.nutrino.presentation.states.GetAllMemesState origin=GET_PROPERTY
                            $this: GET_VAR 'val getAllMemeState: androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> [val] declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> origin=null
                      CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                        $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                          arg0: GET_VAR 'val tmp1_safe_receiver: com.nutrino.domain.mappers.Meme? [val] declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=com.nutrino.domain.mappers.Meme? origin=null
                          arg1: CONST Null type=kotlin.Nothing? value=null
                    then: CALL 'public final fun <get-count> (): kotlin.Int declared in com.nutrino.domain.mappers.Meme' type=kotlin.Int origin=GET_PROPERTY
                      $this: GET_VAR 'val tmp1_safe_receiver: com.nutrino.domain.mappers.Meme? [val] declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=com.nutrino.domain.mappers.Meme? origin=null
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: CONST Null type=kotlin.Nothing? value=null
            modifier: COMPOSITE type=androidx.compose.ui.Modifier? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.Modifier? value=null
            color: COMPOSITE type=androidx.compose.ui.graphics.Color origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.graphics.Color origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.graphics.Color
                v: CONST Long type=kotlin.Long value=0
            fontSize: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.unit.TextUnit
                v: CONST Long type=kotlin.Long value=0
            fontStyle: COMPOSITE type=androidx.compose.ui.text.font.FontStyle? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.font.FontStyle? value=null
            fontWeight: COMPOSITE type=androidx.compose.ui.text.font.FontWeight? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.font.FontWeight? value=null
            fontFamily: COMPOSITE type=androidx.compose.ui.text.font.FontFamily? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.font.FontFamily? value=null
            letterSpacing: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.unit.TextUnit
                v: CONST Long type=kotlin.Long value=0
            textDecoration: COMPOSITE type=androidx.compose.ui.text.style.TextDecoration? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.style.TextDecoration? value=null
            textAlign: COMPOSITE type=androidx.compose.ui.text.style.TextAlign? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.style.TextAlign? value=null
            lineHeight: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.unit.TextUnit
                v: CONST Long type=kotlin.Long value=0
            overflow: COMPOSITE type=androidx.compose.ui.text.style.TextOverflow origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.text.style.TextOverflow origin=null
                <T>: kotlin.Int
                <R>: androidx.compose.ui.text.style.TextOverflow
                v: CONST Int type=kotlin.Int value=0
            softWrap: COMPOSITE type=kotlin.Boolean origin=DEFAULT_VALUE
              CONST Boolean type=kotlin.Boolean value=false
            maxLines: COMPOSITE type=kotlin.Int origin=DEFAULT_VALUE
              CONST Int type=kotlin.Int value=0
            minLines: COMPOSITE type=kotlin.Int origin=DEFAULT_VALUE
              CONST Int type=kotlin.Int value=0
            onTextLayout: COMPOSITE type=kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>? origin=DEFAULT_VALUE
              CONST Null type=kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>? value=null
            style: COMPOSITE type=androidx.compose.ui.text.TextStyle? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.TextStyle? value=null
            $mask0: CONST Int type=kotlin.Int value=131070
            $handler: CONST Null type=kotlin.Any? value=null
      BRANCH
        if: CALL 'public final fun <get-isLoading> (): kotlin.Boolean declared in com.nutrino.presentation.states.GetAllMemesState' type=kotlin.Boolean origin=GET_PROPERTY
          $this: CALL 'public abstract fun <get-value> (): T of androidx.compose.runtime.State declared in androidx.compose.runtime.State' type=com.nutrino.presentation.states.GetAllMemesState origin=GET_PROPERTY
            $this: GET_VAR 'val getAllMemeState: androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> [val] declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> origin=null
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public final fun LinearProgressIndicator-DN1QFQg$default (modifier: androidx.compose.ui.Modifier?, color: androidx.compose.ui.graphics.Color, trackColor: androidx.compose.ui.graphics.Color, strokeCap: androidx.compose.ui.graphics.StrokeCap, gapSize: androidx.compose.ui.unit.Dp, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Unit declared in androidx.compose.material3.ProgressIndicatorKt' type=kotlin.Unit origin=DEFAULT_DISPATCH_CALL
            modifier: COMPOSITE type=androidx.compose.ui.Modifier? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.Modifier? value=null
            color: COMPOSITE type=androidx.compose.ui.graphics.Color origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.graphics.Color origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.graphics.Color
                v: CONST Long type=kotlin.Long value=0
            trackColor: COMPOSITE type=androidx.compose.ui.graphics.Color origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.graphics.Color origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.graphics.Color
                v: CONST Long type=kotlin.Long value=0
            strokeCap: COMPOSITE type=androidx.compose.ui.graphics.StrokeCap origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.graphics.StrokeCap origin=null
                <T>: kotlin.Int
                <R>: androidx.compose.ui.graphics.StrokeCap
                v: CONST Int type=kotlin.Int value=0
            gapSize: COMPOSITE type=androidx.compose.ui.unit.Dp origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.Dp origin=null
                <T>: kotlin.Float
                <R>: androidx.compose.ui.unit.Dp
                v: CONST Float type=kotlin.Float value=0.0
            $mask0: CONST Int type=kotlin.Int value=31
            $handler: CONST Null type=kotlin.Any? value=null
      BRANCH
        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
          $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'public final fun <get-error> (): kotlin.String declared in com.nutrino.presentation.states.GetAllMemesState' type=kotlin.String origin=GET_PROPERTY
              $this: CALL 'public abstract fun <get-value> (): T of androidx.compose.runtime.State declared in androidx.compose.runtime.State' type=com.nutrino.presentation.states.GetAllMemesState origin=GET_PROPERTY
                $this: GET_VAR 'val getAllMemeState: androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> [val] declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> origin=null
            arg1: CONST Null type=kotlin.Nothing? value=null
        then: BLOCK type=kotlin.Unit origin=null
          CALL 'public final fun Text-80ic1_w$default (text: kotlin.String, modifier: androidx.compose.ui.Modifier?, color: androidx.compose.ui.graphics.Color, fontSize: androidx.compose.ui.unit.TextUnit, fontStyle: androidx.compose.ui.text.font.FontStyle?, fontWeight: androidx.compose.ui.text.font.FontWeight?, fontFamily: androidx.compose.ui.text.font.FontFamily?, letterSpacing: androidx.compose.ui.unit.TextUnit, textDecoration: androidx.compose.ui.text.style.TextDecoration?, textAlign: androidx.compose.ui.text.style.TextAlign?, lineHeight: androidx.compose.ui.unit.TextUnit, overflow: androidx.compose.ui.text.style.TextOverflow, softWrap: kotlin.Boolean, maxLines: kotlin.Int, minLines: kotlin.Int, onTextLayout: kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>?, style: androidx.compose.ui.text.TextStyle?, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Unit declared in androidx.compose.material3.TextKt' type=kotlin.Unit origin=DEFAULT_DISPATCH_CALL
            text: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="Error: "
              CALL 'public final fun <get-error> (): kotlin.String declared in com.nutrino.presentation.states.GetAllMemesState' type=kotlin.String origin=GET_PROPERTY
                $this: CALL 'public abstract fun <get-value> (): T of androidx.compose.runtime.State declared in androidx.compose.runtime.State' type=com.nutrino.presentation.states.GetAllMemesState origin=GET_PROPERTY
                  $this: GET_VAR 'val getAllMemeState: androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> [val] declared in com.nutrino.presentation.screens.GetAllMemeScreenKt.GetAllMemeScreen' type=androidx.compose.runtime.State<com.nutrino.presentation.states.GetAllMemesState> origin=null
            modifier: COMPOSITE type=androidx.compose.ui.Modifier? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.Modifier? value=null
            color: COMPOSITE type=androidx.compose.ui.graphics.Color origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.graphics.Color origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.graphics.Color
                v: CONST Long type=kotlin.Long value=0
            fontSize: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.unit.TextUnit
                v: CONST Long type=kotlin.Long value=0
            fontStyle: COMPOSITE type=androidx.compose.ui.text.font.FontStyle? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.font.FontStyle? value=null
            fontWeight: COMPOSITE type=androidx.compose.ui.text.font.FontWeight? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.font.FontWeight? value=null
            fontFamily: COMPOSITE type=androidx.compose.ui.text.font.FontFamily? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.font.FontFamily? value=null
            letterSpacing: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.unit.TextUnit
                v: CONST Long type=kotlin.Long value=0
            textDecoration: COMPOSITE type=androidx.compose.ui.text.style.TextDecoration? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.style.TextDecoration? value=null
            textAlign: COMPOSITE type=androidx.compose.ui.text.style.TextAlign? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.style.TextAlign? value=null
            lineHeight: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                <T>: kotlin.Long
                <R>: androidx.compose.ui.unit.TextUnit
                v: CONST Long type=kotlin.Long value=0
            overflow: COMPOSITE type=androidx.compose.ui.text.style.TextOverflow origin=DEFAULT_VALUE
              CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.text.style.TextOverflow origin=null
                <T>: kotlin.Int
                <R>: androidx.compose.ui.text.style.TextOverflow
                v: CONST Int type=kotlin.Int value=0
            softWrap: COMPOSITE type=kotlin.Boolean origin=DEFAULT_VALUE
              CONST Boolean type=kotlin.Boolean value=false
            maxLines: COMPOSITE type=kotlin.Int origin=DEFAULT_VALUE
              CONST Int type=kotlin.Int value=0
            minLines: COMPOSITE type=kotlin.Int origin=DEFAULT_VALUE
              CONST Int type=kotlin.Int value=0
            onTextLayout: COMPOSITE type=kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>? origin=DEFAULT_VALUE
              CONST Null type=kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>? value=null
            style: COMPOSITE type=androidx.compose.ui.text.TextStyle? origin=DEFAULT_VALUE
              CONST Null type=androidx.compose.ui.text.TextStyle? value=null
            $mask0: CONST Int type=kotlin.Int value=131070
            $handler: CONST Null type=kotlin.Any? value=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:47)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:40)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:406)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:423)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:168)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:39)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt.createFilePhase$lambda$4(PhaseFactories.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:69)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:62)
	... 43 more
Caused by: org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: Couldn't inline method call: CALL 'public final fun hiltViewModel$default <VM> (viewModelStoreOwner: androidx.lifecycle.ViewModelStoreOwner?, key: kotlin.String?, $mask0: kotlin.Int, $handler: kotlin.Any?): VM of androidx.hilt.navigation.compose.HiltViewModelKt.hiltViewModel$default [inline] declared in androidx.hilt.navigation.compose.HiltViewModelKt' type=VM of androidx.hilt.navigation.compose.HiltViewModelKt.hiltViewModel$default origin=DEFAULT_DISPATCH_CALL
Method: null
File is unknown
The root cause java.lang.IllegalStateException was thrown at: org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:65)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen.genInlineCall(IrInlineCodegen.kt:163)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCallGenerator.genCall(IrInlineCallGenerator.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:653)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrCall.accept(IrCall.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitTypeOperator(ExpressionCodegen.kt:1127)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitTypeOperator(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrTypeOperatorCall.accept(IrTypeOperatorCall.kt:26)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitWhen(ExpressionCodegen.kt:1101)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitWhen(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrWhen.accept(IrWhen.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:579)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitContainerExpression(ExpressionCodegen.kt:593)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitContainerExpression(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitor$DefaultImpls.visitBlock(IrElementVisitor.kt:122)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlock(ExpressionCodegen.kt:413)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlock(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrBlock.accept(IrBlock.kt:18)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:790)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.declarations.IrVariable.accept(IrVariable.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:579)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:584)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:138)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:240)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:123)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:44)
	... 53 more
Caused by: java.lang.IllegalStateException: couldn't find inline method Landroidx/hilt/navigation/compose/HiltViewModelKt;.hiltViewModel$default(Landroidx/lifecycle/ViewModelStoreOwner;Ljava/lang/String;ILjava/lang/Object;)Landroidx/lifecycle/ViewModel;
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.loadCompiledInlineFunction(SourceCompilerForInline.kt:96)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline.compileInlineFunction(IrSourceCompilerForInline.kt:91)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.compileInline(InlineCodegen.kt:43)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:51)
	... 81 more


